[
  {
    "id": "1bcbd573.a190cb",
    "type": "tab",
    "label": "Basic example",
    "disabled": false,
    "info": ""
  },
  {
    "id": "a5450668.d5a868",
    "type": "tab",
    "label": "Custom notification",
    "disabled": false,
    "info": ""
  },
  {
    "id": "a5450668.d5a867",
    "type": "tab",
    "label": "Action buttons",
    "disabled": false,
    "info": ""
  },
  {
    "id": "b2c21ac3.e9b6c8",
    "type": "vapid-configuration",
    "z": "",
    "subject": "mailto:<enter_your_email_address_here>",
    "publicKey": "",
    "privateKey": "",
    "gcmApiKey": "",
    "name": ""
  },
  {
    "id": "7aee0477.df29bc",
    "type": "ui_group",
    "z": "",
    "name": "Web push notifications",
    "tab": "937fa2b7.14307",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "937fa2b7.14307",
    "type": "ui_tab",
    "z": "",
    "name": "Home",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "c566c08e.a56d1",
    "type": "vapid-configuration",
    "z": "",
    "subject": "mailto:<enter_your_email_address_here>",
    "publicKey": "",
    "privateKey": "",
    "gcmApiKey": "",
    "name": ""
  },
  {
    "id": "a5b3133f.53177",
    "type": "vapid-configuration",
    "z": "",
    "subject": "mailto:<enter_your_email_address_here>",
    "publicKey": "",
    "privateKey": "",
    "gcmApiKey": "",
    "name": ""
  },
  {
    "id": "78771ed3.4a347",
    "type": "ui_group",
    "z": "",
    "name": "Web push notifications",
    "tab": "fff5f444.6338a8",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "fff5f444.6338a8",
    "type": "ui_tab",
    "z": "",
    "name": "Home",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "9ad3bee6.ea05d",
    "type": "function",
    "z": "1bcbd573.a190cb",
    "name": "Subscription Manager",
    "func": "let pushSubscriptions = flow.get('pushSubscriptions', \"storeInFile\") || []\n  \nlet result = ''\nlet foundSubscriptionItems = [];\n\n// Determine on which subscriptions the action should be executed\nif (msg.payload.action === 'reset') {\n    // Reset has impact on all subscriptions\n    foundSubscriptionItems = pushSubscriptions;\n}\nelse {\n    // Find all subscriptions for the specified endpoint\n    foundSubscriptionItems = pushSubscriptions.filter( subscriptionItem => {\n        return subscriptionItem.endpoint == msg.payload.endpoint;\n    })\n}\n\nlet totalSubscriptionLength = pushSubscriptions.length;\n  \nswitch (msg.topic) {\n    case 'subscribe':\n        var subscription = msg.payload;\n        if (foundSubscriptionItems.length === 0) {\n            pushSubscriptions.push(subscription);\n            result = 'Subscription registered: ' + subscription.endpoint\n        } else {\n            result = 'Subscription was already registered: ' + subscription.endpoint\n        }\n\n        msg.statusCode = 200;\n        break;\n    \n    case 'unsubscribe':\n        var unsubscription = msg.payload;\n        if(foundSubscriptionItems.length === 0) {\n            result = 'Subscription was not found: ' + unsubscription.endpoint\n        } else {\n            pushSubscriptions = pushSubscriptions.filter(subscriptionItem => {\n                return subscriptionItem.endpoint !== unsubscription.endpoint\n            })\n            result = 'Subscription unregistered: ' + unsubscription.endpoint\n        }\n    \n        msg.statusCode = 200;\n        break;\n    case 'reset':\n        // All push subscriptions will be removed!!!!!!!!!\n        // Make sure you know what you are doing, because you cannot send notifications to these endpoints anymore!!!!!!!!!\n        pushSubscriptions = [];\n        break;\n    default:\n        result = 'Unsupported action';\n        msg.statusCode = 400;\n}\n\nmsg.payload = { result: result }\n\n// Show the evolution in number of subscriptions\nnode.status({fill:\"green\",shape:\"dot\",text: pushSubscriptions.length + \" subscription (previously \" + totalSubscriptionLength + \")\"});\n\n// Make sure this flow variable in stored in a file, because we still need the subscriptions \n// after a flow restart (otherwise there is no way anymore to push notifications to those clients!!)\nflow.set('pushSubscriptions', pushSubscriptions, \"storeInFile\")\n  \nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 680,
    "y": 160,
    "wires": [[]]
  },
  {
    "id": "c427339b.522f4",
    "type": "function",
    "z": "1bcbd573.a190cb",
    "name": "Get subscriptions",
    "func": "// Use the flow variable that has been set in Demo Web Push Manager API (\"storeInFile\" context)\nmsg.subscriptions = flow.get('pushSubscriptions', \"storeInFile\") || []\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 670,
    "y": 220,
    "wires": [["5d0ace08.9fcd9"]]
  },
  {
    "id": "5d0ace08.9fcd9",
    "type": "web-push",
    "z": "1bcbd573.a190cb",
    "name": "Send notification to the subscribers",
    "vapidConfiguration": "b2c21ac3.e9b6c8",
    "x": 940,
    "y": 220,
    "wires": [[]]
  },
  {
    "id": "dca1e88b.3c1138",
    "type": "web-push-notification",
    "z": "1bcbd573.a190cb",
    "name": "web push notification",
    "title": "Hello Node-RED user!!!",
    "body": "Click me to open your dashboard",
    "sound": "default",
    "payload": "[{\"key\":\"icon\",\"value\":\"https://nodered.org/about/resources/media/node-red-icon-2.png\",\"type\":\"str\"}]",
    "x": 420,
    "y": 220,
    "wires": [["c427339b.522f4"]]
  },
  {
    "id": "226ef548.68b75a",
    "type": "inject",
    "z": "1bcbd573.a190cb",
    "name": "Send predefined notification",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 160,
    "y": 220,
    "wires": [["dca1e88b.3c1138"]]
  },
  {
    "id": "d38a5e5a.b6ef9",
    "type": "ui_web_push_client",
    "z": "1bcbd573.a190cb",
    "group": "7aee0477.df29bc",
    "order": 3,
    "width": 0,
    "height": 0,
    "webPushConfig": "b2c21ac3.e9b6c8",
    "sendSubscription": true,
    "showConfirmations": true,
    "disableButton": false,
    "subscribeLabel": "Subscribe",
    "unsubscribeLabel": "Unsubscribe",
    "name": "",
    "x": 440,
    "y": 160,
    "wires": [["9ad3bee6.ea05d"]]
  },
  {
    "id": "4ef7cc3d.456874",
    "type": "function",
    "z": "a5450668.d5a868",
    "name": "Get subscriptions",
    "func": "// Use the flow variable that has been set in Demo Web Push Manager API (\"storeInFile\" context)\nmsg.subscriptions = flow.get('pushSubscriptions', \"storeInFile\") || []\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 630,
    "y": 80,
    "wires": [["2484f35f.06ef6c"]]
  },
  {
    "id": "2484f35f.06ef6c",
    "type": "web-push",
    "z": "a5450668.d5a868",
    "name": "Send notification to the subscribers",
    "vapidConfiguration": "c566c08e.a56d1",
    "x": 900,
    "y": 80,
    "wires": [[]]
  },
  {
    "id": "3dd3cab0.03ae26",
    "type": "inject",
    "z": "a5450668.d5a868",
    "name": "Send custom notifcation",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"notification\":{\"title\":\"Hello Node-RED user !\",\"body\":\"Click me to open your dashboard\"},\"data\":{\"silent\":true,\"requireInteraction \":true,\"icon\":\"https://nodered.org/about/resources/media/node-red-icon-2.png\",\"image\":\"https://user-images.githubusercontent.com/14224149/73395580-19bac700-42e0-11ea-90c2-71cb4f496637.png\"}}",
    "payloadType": "json",
    "x": 160,
    "y": 80,
    "wires": [["ccbfe3ac.04ee1"]]
  },
  {
    "id": "ccbfe3ac.04ee1",
    "type": "change",
    "z": "a5450668.d5a868",
    "name": "payload => notification",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "notification",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 400,
    "y": 80,
    "wires": [["4ef7cc3d.456874"]]
  },
  {
    "id": "3bd44f79.71f7d",
    "type": "function",
    "z": "a5450668.d5a867",
    "name": "Subscription Manager",
    "func": "let pushSubscriptions = flow.get('pushSubscriptions', \"storeInFile\") || []\n  \nlet result = ''\nlet foundSubscriptionItems = [];\n\n// Determine on which subscriptions the action should be executed\nif (msg.payload.action === 'reset') {\n    // Reset has impact on all subscriptions\n    foundSubscriptionItems = pushSubscriptions;\n}\nelse {\n    // Find all subscriptions for the specified endpoint\n    foundSubscriptionItems = pushSubscriptions.filter( subscriptionItem => {\n        return subscriptionItem.endpoint == msg.payload.endpoint;\n    })\n}\n\nlet totalSubscriptionLength = pushSubscriptions.length;\n  \nswitch (msg.topic) {\n    case 'subscribe':\n        var subscription = msg.payload;\n        if (foundSubscriptionItems.length === 0) {\n            pushSubscriptions.push(subscription);\n            result = 'Subscription registered: ' + subscription.endpoint\n        } else {\n            result = 'Subscription was already registered: ' + subscription.endpoint\n        }\n\n        msg.statusCode = 200;\n        break;\n    \n    case 'unsubscribe':\n        var unsubscription = msg.payload;\n        if(foundSubscriptionItems.length === 0) {\n            result = 'Subscription was not found: ' + unsubscription.endpoint\n        } else {\n            pushSubscriptions = pushSubscriptions.filter(subscriptionItem => {\n                return subscriptionItem.endpoint !== unsubscription.endpoint\n            })\n            result = 'Subscription unregistered: ' + unsubscription.endpoint\n        }\n    \n        msg.statusCode = 200;\n        break;\n    case 'reset':\n        // All push subscriptions will be removed!!!!!!!!!\n        // Make sure you know what you are doing, because you cannot send notifications to these endpoints anymore!!!!!!!!!\n        pushSubscriptions = [];\n        break;\n    default:\n        result = 'Unsupported action';\n        msg.statusCode = 400;\n}\n\nmsg.payload = { result: result }\n\n// Show the evolution in number of subscriptions\nnode.status({fill:\"green\",shape:\"dot\",text: pushSubscriptions.length + \" subscription (previously \" + totalSubscriptionLength + \")\"});\n\n// Make sure this flow variable in stored in a file, because we still need the subscriptions \n// after a flow restart (otherwise there is no way anymore to push notifications to those clients!!)\nflow.set('pushSubscriptions', pushSubscriptions, \"storeInFile\")\n  \nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 720,
    "y": 100,
    "wires": [[]]
  },
  {
    "id": "5a44e93d.701b48",
    "type": "function",
    "z": "a5450668.d5a867",
    "name": "Get subscriptions",
    "func": "// Use the flow variable that has been set in Demo Web Push Manager API (\"storeInFile\" context)\nmsg.subscriptions = flow.get('pushSubscriptions', \"storeInFile\") || []\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 710,
    "y": 160,
    "wires": [["c24018f0.006028"]]
  },
  {
    "id": "efe5fb1c.faf508",
    "type": "inject",
    "z": "a5450668.d5a867",
    "name": "Send notifcation with buttons",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"notification\":{\"title\":\"Hello Node-RED user !\",\"body\":\"Click me to open your dashboard\"},\"data\":{\"icon\":\"https://nodered.org/about/resources/media/node-red-icon-2.png\",\"actions\":[{\"action\":\"open_garage_cindy\",\"title\":\"Open garage Cindy\"},{\"action\":\"open_garage_bart\",\"title\":\"Open garage Bart\"}]}}",
    "payloadType": "json",
    "x": 220,
    "y": 160,
    "wires": [["b7102aaa.d29e88"]]
  },
  {
    "id": "c24018f0.006028",
    "type": "web-push",
    "z": "a5450668.d5a867",
    "name": "Send notification to the subscribers",
    "vapidConfiguration": "a5b3133f.53177",
    "x": 980,
    "y": 160,
    "wires": [[]]
  },
  {
    "id": "d2d20fff.1d23c",
    "type": "http in",
    "z": "a5450668.d5a867",
    "name": "",
    "url": "/open_garage_bart",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 180,
    "y": 240,
    "wires": [["ae72ef7e.136d3", "572dcc.de315234"]]
  },
  {
    "id": "ae72ef7e.136d3",
    "type": "debug",
    "z": "a5450668.d5a867",
    "name": "Notification action to open garage bart",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 510,
    "y": 280,
    "wires": []
  },
  {
    "id": "93d537df.57fd08",
    "type": "http in",
    "z": "a5450668.d5a867",
    "name": "",
    "url": "/open_garage_cindy",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 190,
    "y": 360,
    "wires": [["766d2c98.1f6854", "e203a128.91333"]]
  },
  {
    "id": "766d2c98.1f6854",
    "type": "debug",
    "z": "a5450668.d5a867",
    "name": "Notification action to open garage cindy",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 520,
    "y": 400,
    "wires": []
  },
  {
    "id": "572dcc.de315234",
    "type": "http response",
    "z": "a5450668.d5a867",
    "name": "Answer 'ok'",
    "statusCode": "200",
    "headers": {},
    "x": 430,
    "y": 240,
    "wires": []
  },
  {
    "id": "e203a128.91333",
    "type": "http response",
    "z": "a5450668.d5a867",
    "name": "Answer 'ok'",
    "statusCode": "200",
    "headers": {},
    "x": 430,
    "y": 360,
    "wires": []
  },
  {
    "id": "b7102aaa.d29e88",
    "type": "change",
    "z": "a5450668.d5a867",
    "name": "payload => notification",
    "rules": [
      {
        "t": "move",
        "p": "payload",
        "pt": "msg",
        "to": "notification",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 480,
    "y": 160,
    "wires": [["5a44e93d.701b48"]]
  },
  {
    "id": "a87961fb.2d085",
    "type": "ui_web_push_client",
    "z": "a5450668.d5a867",
    "group": "78771ed3.4a347",
    "order": 3,
    "width": 0,
    "height": 0,
    "webPushConfig": "a5b3133f.53177",
    "sendSubscription": true,
    "showConfirmations": true,
    "disableButton": false,
    "subscribeLabel": "Subscribe",
    "unsubscribeLabel": "Unsubscribe",
    "name": "",
    "x": 480,
    "y": 100,
    "wires": [["3bd44f79.71f7d"]]
  }
]
